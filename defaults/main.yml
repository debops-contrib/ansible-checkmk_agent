---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# .. Basic configuration options (((
#
# -------------------------------
#   Basic configuration options
# -------------------------------

# .. envvar:: apt_cacher_ng__base_packages
#
# List of base packages to install.
checkmk__base_packages:
  - 'check-mk-agent'


# .. envvar:: checkmk_agent
#
# Check_MK agent query protocol. Set to ``False`` to disable agent setup.
# Valid options are ``ssh`` and ``xinetd``.
checkmk_agent: [ 'xinetd' ]


# .. envvar:: checkmk_agent_allow
#
# List of IP addresses or network CIDR ranges allowed to connect to the
# Check_MK agent through the firewall. If list are empty, anyone can connect.
checkmk_agent_allow: []


# .. envvar:: checkmk_agent_ferm_dependent_rules
#
# Configuration of the Linux firewall using ``debops.ferm``.
checkmk_agent_ferm_dependent_rules:
  - type: 'accept'
    dport: [ 'check-mk-agent' ]
    saddr: '{{ checkmk_agent_allow }}'
    accept_any: True
    weight: '20'

# .. )))

# .. Agent xinetd options (((
#
# ------------------------
#   Agent xinetd options
# ------------------------

# .. envvar:: checkmk_agent_exec
#
# Check_MK agent executable path. If you query the agent from multiple
# servers, you may want to set this to ``/usr/bin/check_mk_caching_agent``.
checkmk_agent_exec: '/usr/bin/check_mk_agent'


# .. envvar:: checkmk_agent_port
#
# Listen port for Check_MK agent.
checkmk_agent_port: '6556'

# .. )))

# .. Agent SSH user options (((
#
# --------------------------
#   Agent SSH user options
# --------------------------

# .. envvar:: checkmk_agent_ssh_user
#
# SSH user to query Check_MK agent.
checkmk_agent_ssh_user: 'nagios'


# .. envvar:: checkmk_agent_ssh_group
#
# Primary group of SSH user querying Check_MK agent.
checkmk_agent_ssh_group: 'nagios'


# .. envvar:: checkmk_agent_user_home
#
# Home directory of SSH user querying Check_MK agent.
checkmk_agent_user_home: '/var/lib/nagios'


# .. envvar:: checkmk_agent_user_key
#
# SSH Public key for logging in with SSH user.
checkmk_agent_user_key: ''

# .. )))

# .. Agent plugins options (((
#
# -------------------------
#   Agent plugins options
# -------------------------

# .. envvar:: checkmk_agent_plugins
#
# List of upstream Check_MK agent plugins to always enable.
checkmk_agent_plugins: []


# .. envvar:: checkmk_agent_group_plugins
#
# "Host Group" list of upstream Check_MK agent plugins to always enable.
checkmk_agent_group_plugins: []


# .. envvar:: checkmk_agent_host_plugins
#
# "Host" list of upstream Check_MK agent plugins to always enable.
checkmk_agent_host_plugins: []


# .. envvar:: checkmk_agent_plugins_autodetect
#
# Try to install Check_MK agent plugins for applications auto detected
# via DebOps host group memberships.
checkmk_agent_plugin_autodetect: True


# .. envvar:: checkmk_agent_plugins_path
#
# Destination path to install the Check_MK agent plugins.
checkmk_agent_plugin_path: '/usr/lib/check_mk_agent/plugins'


# .. envvar:: checkmk_agent_group_plugin_map
#
# DebOps hostgroup to plugin mapping.
checkmk_agent_group_plugin_map:
  debops_mariadb_server: 'mk_mysql'
  debops_service_mariadb_server: 'mk_mysql'
  debops_mysql: 'mk_mysql'
  debops_service_mysql: 'mk_mysql'
  debops_nginx: 'nginx_status'
  debops_service_nginx: 'nginx_status'
  debops_postgresql: 'mk_postgres'
  debops_service_postgresql: 'mk_postgres'


# .. envvar:: checkmk_agent_plugin_list
#
# Combined list of all plugins which are going to be installed.
# Plugins which can be detected by looking at the host group will be added
# accruing to :ref:`checkmk_agent_group_plugin_map` when
# :ref:`checkmk_agent_plugin_autodetect` is ``True``.
checkmk_agent_plugin_list: '{{ (
  (checkmk_agent_plugins|d([])) +
  (checkmk_agent_group_plugins|d([])) +
  (checkmk_agent_host_plugins|d([])) ) | unique }}'

# .. )))

# .. MySQL/MariaDB monitoring plugins options (((
#
# -------------------------
#   MySQL/MariaDB monitoring plugins options
# -------------------------

# .. envvar:: checkmk_agent_plugin_mysql
#
# When a host should get the ``mk_mysql`` monitoring plugin then additionally
# automatically configure it. This will setup a database user which has read
# access to the database server.
# Set to ``manual`` to configure it manually.
# See https://mathias-kettner.de/checkmk_mysql.html
checkmk_agent_plugin_mysql: 'automatic'


# .. envvar:: checkmk_agent_plugin_mysql_user
#
# Database user account name to use for monitoring.
checkmk_agent_plugin_mysql_user: 'monitor'


# .. envvar:: checkmk_agent_plugin_mysql_password
#
# Database user password to use for monitoring.
checkmk_agent_plugin_mysql_password: "{{ lookup('password', secret + '/mariadb/' +
                                         ansible_local.mariadb.delegate_to +
                                         '/credentials/' + checkmk_agent_plugin_mysql_user +
                                         '/password length=48') }}"


# .. envvar:: checkmk_agent_plugin_mysql_priv
#
# Privilages of the database user used for monitoring.
checkmk_agent_plugin_mysql_priv: '*.*:SELECT,SHOW DATABASES'

# .. )))

# .. nginx monitoring plugins options (((
#
# ------------------------------------
#   nginx monitoring plugins options
# ------------------------------------

# .. envvar:: checkmk_agent_plugin_nginx_servers
#
# This option allows you to configure the servers which nginx_status_
# plugin should monitoring. This might be required when the auto detection of
# the plugin fails for example because the default server does not allow
# ``/nginx_status``. This can happen because the plugin tires to connect with
# the IP address set as Host.
# This is currently set manually to ``localhost`` as workaround. See
# https://github.com/debops-contrib/ansible-checkmk_agent/pull/3
#
# .. _nginx_status: https://mathias-kettner.de/checkmk_check_nginx_status.html
#
# Example::
#
#   checkmk_agent_plugin_nginx_servers:
#     - proto: 'http'
#       ipaddress: 'some-appliance.corp.com'
#       port: 80
#     - proto: 'http'
#       ipaddress: '[::1]'
#       port: 80
#
#   checkmk_agent_plugin_nginx_servers: 'automatic'
#
checkmk_agent_plugin_nginx_servers:
  - proto: 'http'
    ipaddress: 'localhost'
    port: 80

# .. )))

# .. Agent plugins source options (((
#
# --------------------------------
#   Agent plugins source options
# --------------------------------

# .. envvar:: checkmk_agent_git_repo
#
# Check_MK agent source repository.
checkmk_agent_git_repo: 'http://git.mathias-kettner.de/check_mk.git'


# .. envvar:: checkmk_agent_git_dest
#
# Check_MK agent source directory on the host.
checkmk_agent_git_dest: '{{ "/usr/local/src/check-mk/" + checkmk_agent_git_repo.split("://")[1] }}'


# .. envvar:: checkmk_agent_git_version
#
# Check_MK agent git branch to deploy. Set ``auto`` to set version to dpkg
# package version.
checkmk_agent_git_version: 'auto'

# .. )))
